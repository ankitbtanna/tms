{"version":3,"sources":["./apps/tms/src/app/forgot-password/forgot-password.module.ts","./apps/tms/src/app/forgot-password/forgot-password.component.ts","./apps/tms/src/app/forgot-password/forgot-password.component.html","./apps/tms/src/app/forgot-password/forgot-password.constant.ts","./apps/tms/src/app/forgot-password/forgot-password.routes.ts"],"names":[],"mappings":"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","file":"forgot-password-forgot-password-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { MaterialModule } from '../material.module';\nimport { FORGOT_PASSWORD_ROUTES } from './forgot-password.routes';\nimport { ForgotPasswordComponent } from './forgot-password.component';\nimport { AuthService } from '../services/auth.service';\n\n@NgModule({\n  declarations: [ForgotPasswordComponent],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MaterialModule,\n    RouterModule.forChild(FORGOT_PASSWORD_ROUTES)\n  ],\n  providers: [AuthService]\n})\nexport class ForgotPasswordModule { }\n","import { Component, OnInit } from '@angular/core';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { CookieService } from 'ngx-cookie-service';\nimport { AuthService } from '../services/auth.service';\nimport { USERNAME_REGEX, PASSWORD_REGEX } from './forgot-password.constant';\n\n@Component({\n  selector: 'tms-forgot-password',\n  templateUrl: './forgot-password.component.html',\n  styleUrls: ['./forgot-password.component.scss'],\n})\nexport class ForgotPasswordComponent implements OnInit {\n  hide = true;\n  isPasswordFocused = false;\n  isConfirmPasswordFocused = false;\n  forgotPasswordForm: FormGroup = new FormGroup({\n    username: new FormControl('', [\n      Validators.required,\n      Validators.pattern(USERNAME_REGEX),\n    ]),\n  });\n\n  passwordForm = this.formBuilder.group(\n    {\n      password: ['', [Validators.required, Validators.pattern(PASSWORD_REGEX)]],\n      confirmPassword: [\n        '',\n        [Validators.required, Validators.pattern(PASSWORD_REGEX)],\n      ],\n    },\n    { validator: this.checkPasswords }\n  );\n\n  constructor(private formBuilder: FormBuilder, private cookieService: CookieService, private authService: AuthService) { }\n\n  ngOnInit(): void {\n    this.cookieService.deleteAll();\n    this.authService.loggedIn.next(false);\n  }\n\n  checkPasswords(group: FormGroup) {\n    const pass = group.controls.password.value;\n    const confirmPass = group.controls.confirmPassword.value;\n    return pass === confirmPass ? null : { notSame: true };\n  }\n}\n","<mat-card class=\"forgot-password-card\" fxLayout=\"column\" fxFlexAlign=\"center\">\n  <mat-card-title\n    class=\"forgot-password-card__title\"\n    fxLayout=\"row\"\n    fxFlexAlign=\"center\"\n    >Forgot Password</mat-card-title\n  >\n  <mat-card-content\n    class=\"forgot-password-card__content\"\n    fxLayout=\"colum\"\n    fxFlexAlign=\"center\"\n  >\n    <div\n      [formGroup]=\"forgotPasswordForm\"\n      fxLayout=\"column\"\n      fxFlexAlign=\"center\"\n      fxFlexFill\n    >\n      <mat-form-field>\n        <mat-label>Username(email)</mat-label>\n        <input\n          matInput\n          placeholder=\"pat@example.com\"\n          required\n          formControlName=\"username\"\n        />\n        <mat-error *ngIf=\"!forgotPasswordForm.controls.username.valid\"\n          >Username is invalid.</mat-error\n        >\n      </mat-form-field>\n      <div [formGroup]=\"passwordForm\" fxLayout=\"column\">\n        <mat-form-field>\n          <mat-label>Password</mat-label>\n          <input\n            matInput\n            [type]=\"hide ? 'password' : 'text'\"\n            required\n            (focus)=\"isPasswordFocused = true\"\n            (blur)=\"isPasswordFocused = false\"\n            formControlName=\"password\"\n          />\n          <button\n            mat-icon-button\n            matSuffix\n            (click)=\"hide = !hide\"\n            [attr.aria-label]=\"'Hide password'\"\n            [attr.aria-pressed]=\"hide\"\n          >\n            <mat-icon>{{ hide ? 'visibility_off' : 'visibility' }}</mat-icon>\n          </button>\n          <mat-error *ngIf=\"!passwordForm.controls.password.valid\"\n            >Password is invalid.</mat-error\n          >\n          <mat-error\n            *ngIf=\"!passwordForm.controls.password.valid && !isPasswordFocused\"\n            >Password must contain 1 Capital letter, 1 Small letter, 1 Special\n            character and 1 Number. Minimum length 8, Maximum length\n            30.</mat-error\n          >\n        </mat-form-field>\n        <mat-form-field>\n          <mat-label>Confirm Password</mat-label>\n          <input\n            matInput\n            [type]=\"hide ? 'password' : 'text'\"\n            required\n            (focus)=\"isConfirmPasswordFocused = true\"\n            (blur)=\"isConfirmPasswordFocused = false\"\n            formControlName=\"confirmPassword\"\n          />\n          <button\n            mat-icon-button\n            matSuffix\n            (click)=\"hide = !hide\"\n            [attr.aria-label]=\"'Hide password'\"\n            [attr.aria-pressed]=\"hide\"\n          >\n            <mat-icon>{{ hide ? 'visibility_off' : 'visibility' }}</mat-icon>\n          </button>\n          <mat-error *ngIf=\"!passwordForm.controls.confirmPassword.valid\"\n            >Password is invalid.</mat-error\n          >\n          <mat-error\n            *ngIf=\"\n              !passwordForm.controls.confirmPassword.valid &&\n              !isConfirmPasswordFocused\n            \"\n            >Password must contain 1 Capital letter, 1 Small letter, 1 Special\n            character and 1 Number. Minimum length 8, Maximum length\n            30.</mat-error\n          >\n        </mat-form-field>\n        <mat-error\n          *ngIf=\"\n            passwordForm.controls.password.touched &&\n            passwordForm.controls.confirmPassword.touched &&\n            passwordForm.hasError('notSame')\n          \"\n        >\n          Passwords do not match.\n        </mat-error>\n      </div>\n    </div>\n  </mat-card-content>\n  <mat-card-actions\n    class=\"forgot-password-card__actions\"\n    fxLayout=\"colum\"\n    fxFlexAlign=\"center\"\n  >\n    <div class=\"actions\" fxLayout=\"row\" fxFlexAlign=\"center\">\n      <button\n        mat-raised-button\n        color=\"primary\"\n        [disabled]=\"\n          !forgotPasswordForm.valid ||\n          !passwordForm.valid ||\n          passwordForm.hasError('notSame')\n        \"\n      >\n        Reset Password\n      </button>\n      <button mat-raised-button routerLink=\"/\" color=\"warn\">Cancel</button>\n    </div>\n  </mat-card-actions>\n</mat-card>\n","export const USERNAME_REGEX = '^[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,4}$';\nexport const PASSWORD_REGEX =\n  '^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,30}$';\n","import { Routes } from \"@angular/router\";\nimport { ForgotPasswordComponent } from \"./forgot-password.component\";\n\nexport const FORGOT_PASSWORD_ROUTES: Routes = [\n    {\n        path: '',\n        component: ForgotPasswordComponent\n    }\n];"],"sourceRoot":"webpack:///"}